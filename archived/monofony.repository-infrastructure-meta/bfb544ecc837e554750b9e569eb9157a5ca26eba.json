{
    "manifests": {
        "monofony/repository-infrastructure-meta": {
            "manifest": {
                "copy-from-recipe": {
                    "src/": "%SRC_DIR%/"
                }
            },
            "files": {
                "src/Shared/Infrastructure/Doctrine/DoctrinePaginator.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\Doctrine;",
                        "",
                        "use App\\Shared\\Domain\\Repository\\PaginatorInterface;",
                        "use Doctrine\\ORM\\Tools\\Pagination\\Paginator;",
                        "",
                        "/**",
                        " * @template T of object",
                        " *",
                        " * @implements PaginatorInterface<T>",
                        " */",
                        "final readonly class DoctrinePaginator implements PaginatorInterface",
                        "{",
                        "    private int $firstResult;",
                        "    private int $maxResults;",
                        "",
                        "    /**",
                        "     * @param Paginator<T> $paginator",
                        "     */",
                        "    public function __construct(",
                        "        private Paginator $paginator,",
                        "    ) {",
                        "        $firstResult = $paginator->getQuery()->getFirstResult();",
                        "        $maxResults = $paginator->getQuery()->getMaxResults();",
                        "",
                        "        if (null === $maxResults) {",
                        "            throw new \\InvalidArgumentException('Missing maxResults from the query.');",
                        "        }",
                        "",
                        "        $this->firstResult = $firstResult;",
                        "        $this->maxResults = $maxResults;",
                        "    }",
                        "",
                        "    public function getItemsPerPage(): int",
                        "    {",
                        "        return $this->maxResults;",
                        "    }",
                        "",
                        "    public function getCurrentPage(): int",
                        "    {",
                        "        if (0 >= $this->maxResults) {",
                        "            return 1;",
                        "        }",
                        "",
                        "        return (int) (1 + floor($this->firstResult / $this->maxResults));",
                        "    }",
                        "",
                        "    public function getLastPage(): int",
                        "    {",
                        "        if (0 >= $this->maxResults) {",
                        "            return 1;",
                        "        }",
                        "",
                        "        return (int) (ceil($this->getTotalItems() / $this->maxResults) ?: 1);",
                        "    }",
                        "",
                        "    public function getTotalItems(): int",
                        "    {",
                        "        return count($this->paginator);",
                        "    }",
                        "",
                        "    public function count(): int",
                        "    {",
                        "        return iterator_count($this->getIterator());",
                        "    }",
                        "",
                        "    public function getIterator(): \\Traversable",
                        "    {",
                        "        return $this->paginator->getIterator();",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/Doctrine/DoctrineRepository.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\Doctrine;",
                        "",
                        "use App\\Shared\\Domain\\Repository\\PaginatorInterface;",
                        "use App\\Shared\\Domain\\Repository\\RepositoryInterface;",
                        "use Doctrine\\ORM\\EntityManagerInterface;",
                        "use Doctrine\\ORM\\QueryBuilder;",
                        "use Doctrine\\ORM\\Tools\\Pagination\\Paginator;",
                        "use Webmozart\\Assert\\Assert;",
                        "",
                        "/**",
                        " * @template T of object",
                        " *",
                        " * @implements RepositoryInterface<T>",
                        " */",
                        "abstract class DoctrineRepository implements RepositoryInterface",
                        "{",
                        "    private int|null $page = null;",
                        "    private int|null $itemsPerPage = null;",
                        "",
                        "    private QueryBuilder $queryBuilder;",
                        "",
                        "    public function __construct(",
                        "        protected EntityManagerInterface $em,",
                        "        string $entityClass,",
                        "        string $alias,",
                        "    ) {",
                        "        $this->queryBuilder = $this->em->createQueryBuilder()",
                        "            ->select($alias)",
                        "            ->from($entityClass, $alias);",
                        "    }",
                        "",
                        "    public function getIterator(): \\Iterator",
                        "    {",
                        "        if (null !== $paginator = $this->paginator()) {",
                        "            yield from $paginator;",
                        "",
                        "            return;",
                        "        }",
                        "",
                        "        yield from $this->queryBuilder->getQuery()->getResult();",
                        "    }",
                        "",
                        "    public function count(): int",
                        "    {",
                        "        $paginator = $this->paginator() ?? new Paginator(clone $this->queryBuilder);",
                        "",
                        "        return $paginator->count();",
                        "    }",
                        "",
                        "    public function paginator(): PaginatorInterface|null",
                        "    {",
                        "        if (null === $this->page || null === $this->itemsPerPage) {",
                        "            return null;",
                        "        }",
                        "",
                        "        $firstResult = ($this->page - 1) * $this->itemsPerPage;",
                        "        $maxResults = $this->itemsPerPage;",
                        "",
                        "        $repository = $this->filter(static function (QueryBuilder $qb) use ($firstResult, $maxResults) {",
                        "            $qb->setFirstResult($firstResult)->setMaxResults($maxResults);",
                        "        });",
                        "",
                        "        /** @var Paginator<T> $paginator */",
                        "        $paginator = new Paginator($repository->queryBuilder->getQuery());",
                        "",
                        "        return new DoctrinePaginator($paginator);",
                        "    }",
                        "",
                        "    public function withoutPagination(): static",
                        "    {",
                        "        $cloned = clone $this;",
                        "        $cloned->page = null;",
                        "        $cloned->itemsPerPage = null;",
                        "",
                        "        return $cloned;",
                        "    }",
                        "",
                        "    public function withPagination(int $page, int $itemsPerPage): static",
                        "    {",
                        "        Assert::positiveInteger($page);",
                        "        Assert::positiveInteger($itemsPerPage);",
                        "",
                        "        $cloned = clone $this;",
                        "        $cloned->page = $page;",
                        "        $cloned->itemsPerPage = $itemsPerPage;",
                        "",
                        "        return $cloned;",
                        "    }",
                        "",
                        "    /**",
                        "     * @return static<T>",
                        "     *",
                        "     * @phpstan-ignore-next-line",
                        "     */",
                        "    protected function filter(callable $filter): static",
                        "    {",
                        "        $cloned = clone $this;",
                        "        $filter($cloned->queryBuilder);",
                        "",
                        "        return $cloned;",
                        "    }",
                        "",
                        "    protected function query(): QueryBuilder",
                        "    {",
                        "        return clone $this->queryBuilder;",
                        "    }",
                        "",
                        "    protected function __clone()",
                        "    {",
                        "        $this->queryBuilder = clone $this->queryBuilder;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/Pagerfanta/PagerfantaPaginator.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\Pagerfanta;",
                        "",
                        "use App\\Shared\\Domain\\Repository\\PaginatorInterface;",
                        "use Pagerfanta\\PagerfantaInterface;",
                        "",
                        "final class PagerfantaPaginator implements PaginatorInterface",
                        "{",
                        "    public function __construct(",
                        "        private PagerfantaInterface $pagerfanta,",
                        "    ) {",
                        "    }",
                        "",
                        "    public function getIterator(): \\Traversable",
                        "    {",
                        "        return $this->pagerfanta->getIterator();",
                        "    }",
                        "",
                        "    public function count(): int",
                        "    {",
                        "        return iterator_count($this->pagerfanta->getIterator());",
                        "    }",
                        "",
                        "    public function getCurrentPage(): int",
                        "    {",
                        "        return $this->pagerfanta->getCurrentPage();",
                        "    }",
                        "",
                        "    public function getItemsPerPage(): int",
                        "    {",
                        "        return $this->pagerfanta->getMaxPerPage();",
                        "    }",
                        "",
                        "    public function getLastPage(): int",
                        "    {",
                        "        return $this->pagerfanta->getNbPages();",
                        "    }",
                        "",
                        "    public function getTotalItems(): int",
                        "    {",
                        "        return $this->pagerfanta->getNbResults();",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "bfb544ecc837e554750b9e569eb9157a5ca26eba"
        }
    }
}
