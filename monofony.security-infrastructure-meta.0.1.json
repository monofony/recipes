{
    "manifests": {
        "monofony/security-infrastructure-meta": {
            "manifest": {
                "copy-from-recipe": {
                    "src/": "%SRC_DIR%/"
                }
            },
            "files": {
                "src/Security/Infrastructure/EventListener/CanonicalizerListener.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\EventListener;",
                        "",
                        "use App\\Security\\Infrastructure\\Persistence\\Doctrine\\ORM\\Entity\\SecurityAdminUser;",
                        "use App\\Security\\Infrastructure\\Security\\User\\Canonicalizer\\CanonicalizerInterface;",
                        "use Doctrine\\Bundle\\DoctrineBundle\\Attribute\\AsDoctrineListener;",
                        "use Doctrine\\ORM\\Events;",
                        "use Doctrine\\Persistence\\Event\\LifecycleEventArgs;",
                        "",
                        "#[AsDoctrineListener(event: Events::prePersist)]",
                        "#[AsDoctrineListener(event: Events::preUpdate)]",
                        "final readonly class CanonicalizerListener",
                        "{",
                        "    public function __construct(",
                        "        private CanonicalizerInterface $canonicalizer",
                        "    ) {",
                        "    }",
                        "",
                        "    public function prePersist(LifecycleEventArgs $event): void",
                        "    {",
                        "        $this->canonicalize($event);",
                        "    }",
                        "",
                        "    public function preUpdate(LifecycleEventArgs $event): void",
                        "    {",
                        "        $this->canonicalize($event);",
                        "    }",
                        "",
                        "    public function canonicalize(LifecycleEventArgs $event): void",
                        "    {",
                        "        $item = $event->getObject();",
                        "",
                        "        if (!$item instanceof SecurityAdminUser) {",
                        "            return;",
                        "        }",
                        "",
                        "        $item->setEmailCanonical($this->canonicalizer->canonicalize($item->getEmail()));",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Identity/AdminUserIdGenerator.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Identity;",
                        "",
                        "use App\\Security\\Domain\\ValueObject\\User\\AdminUserId;",
                        "use App\\Shared\\Infrastructure\\Generator\\GeneratorInterface;",
                        "",
                        "final readonly class AdminUserIdGenerator",
                        "{",
                        "    public function __construct(",
                        "        private GeneratorInterface $generator,",
                        "    ) {",
                        "    }",
                        "",
                        "    public function nextIdentity(): AdminUserId",
                        "    {",
                        "        return new AdminUserId($this->generator::generate());",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Persistence/Doctrine/Listener/HashAdminUserPasswordListener.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Persistence\\Doctrine\\Listener;",
                        "",
                        "use App\\Security\\Infrastructure\\Persistence\\Doctrine\\ORM\\Entity\\SecurityAdminUser;",
                        "use Doctrine\\Bundle\\DoctrineBundle\\Attribute\\AsDoctrineListener;",
                        "use Doctrine\\ORM\\Events;",
                        "use Doctrine\\Persistence\\Event\\LifecycleEventArgs;",
                        "use Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;",
                        "",
                        "#[AsDoctrineListener(event: Events::prePersist)]",
                        "#[AsDoctrineListener(event: Events::preUpdate)]",
                        "final readonly class HashAdminUserPasswordListener",
                        "{",
                        "    public function __construct(",
                        "        private UserPasswordHasherInterface $passwordHasher,",
                        "    ) {",
                        "    }",
                        "",
                        "    public function prePersist(LifecycleEventArgs $event): void",
                        "    {",
                        "        $this->hashPassword($event);",
                        "    }",
                        "",
                        "    public function preUpdate(LifecycleEventArgs $event): void",
                        "    {",
                        "        $this->hashPassword($event);",
                        "    }",
                        "",
                        "    private function hashPassword(LifecycleEventArgs $event): void",
                        "    {",
                        "        $item = $event->getObject();",
                        "",
                        "        if (!$item instanceof SecurityAdminUser || null === $item->getPlainPassword()) {",
                        "            return;",
                        "        }",
                        "",
                        "        $item->setPassword($this->passwordHasher->hashPassword($item, $item->getPlainPassword()));",
                        "        $item->eraseCredentials();",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Persistence/Doctrine/ORM/Entity/SecurityAdminUser.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Persistence\\Doctrine\\ORM\\Entity;",
                        "",
                        "use Doctrine\\ORM\\Mapping as ORM;",
                        "use Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator;",
                        "use Symfony\\Bridge\\Doctrine\\Types\\UuidType;",
                        "use Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;",
                        "use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
                        "use Symfony\\Component\\Uid\\Uuid;",
                        "use Webmozart\\Assert\\Assert;",
                        "",
                        "#[ORM\\Entity]",
                        "#[ORM\\Table(name: 'sylius_admin_user')]",
                        "class SecurityAdminUser implements UserInterface, PasswordAuthenticatedUserInterface",
                        "{",
                        "    #[ORM\\Id]",
                        "    #[ORM\\Column(type: UuidType::NAME, unique: true)]",
                        "    #[ORM\\GeneratedValue(strategy: 'CUSTOM')]",
                        "    #[ORM\\CustomIdGenerator(class: UuidGenerator::class)]",
                        "    private Uuid|null $id;",
                        "",
                        "    #[ORM\\Column]",
                        "    private string|null $email = null;",
                        "",
                        "    #[ORM\\Column]",
                        "    private string|null $emailCanonical = null;",
                        "",
                        "    #[ORM\\Column]",
                        "    private string|null $password = null;",
                        "",
                        "    #[ORM\\Column]",
                        "    private array $roles = [self::DEFAULT_ADMIN_ROLE];",
                        "",
                        "    #[ORM\\Column(type: 'datetime_immutable', nullable: true)]",
                        "    private \\DateTimeInterface|null $updatedAt = null;",
                        "",
                        "    private string|null $plainPassword = null;",
                        "",
                        "    /** @api */",
                        "    final public const string DEFAULT_ADMIN_ROLE = 'ROLE_ADMIN';",
                        "",
                        "    public function __construct(Uuid|null $id = null)",
                        "    {",
                        "        $this->id = $id;",
                        "    }",
                        "",
                        "    public function getId(): Uuid|null",
                        "    {",
                        "        return $this->id;",
                        "    }",
                        "",
                        "    public function getEmail(): string|null",
                        "    {",
                        "        return $this->email;",
                        "    }",
                        "",
                        "    public function setEmail(string|null $email): void",
                        "    {",
                        "        $this->email = $email;",
                        "    }",
                        "",
                        "    public function getEmailCanonical(): string|null",
                        "    {",
                        "        return $this->emailCanonical;",
                        "    }",
                        "",
                        "    public function setEmailCanonical(string|null $emailCanonical): void",
                        "    {",
                        "        $this->emailCanonical = $emailCanonical;",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public function getPassword(): string|null",
                        "    {",
                        "        return $this->password;",
                        "    }",
                        "",
                        "    public function setPassword(string|null $password): void",
                        "    {",
                        "        $this->password = $password;",
                        "    }",
                        "",
                        "    public function getPlainPassword(): string|null",
                        "    {",
                        "        return $this->plainPassword;",
                        "    }",
                        "",
                        "    public function setPlainPassword(string|null $plainPassword): void",
                        "    {",
                        "        $this->plainPassword = $plainPassword;",
                        "        $this->updatedAt = new \\DateTimeImmutable();",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public function getRoles(): array",
                        "    {",
                        "        $roles = $this->roles;",
                        "        // guarantee every user at least has ROLE_USER",
                        "        $roles[] = 'ROLE_USER';",
                        "",
                        "        return array_unique($roles);",
                        "    }",
                        "",
                        "    /**",
                        "     * @param list<string> $roles",
                        "     */",
                        "    public function setRoles(array $roles): void",
                        "    {",
                        "        $this->roles = $roles;",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public function getUserIdentifier(): string",
                        "    {",
                        "        $username = $this->getEmail();",
                        "        Assert::notNull($username);",
                        "        Assert::stringNotEmpty($username);",
                        "",
                        "        return $username;",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public function eraseCredentials(): void",
                        "    {",
                        "        $this->plainPassword = null;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Persistence/Doctrine/ORM/Repository/DoctrineAdminUserRepository.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Persistence\\Doctrine\\ORM\\Repository;",
                        "",
                        "use App\\Security\\Domain\\Model\\User\\AdminUser;",
                        "use App\\Security\\Domain\\Repository\\AdminUserRepositoryInterface;",
                        "use App\\Security\\Domain\\ValueObject\\User\\AdminUserEmail;",
                        "use App\\Security\\Domain\\ValueObject\\User\\AdminUserId;",
                        "use App\\Security\\Infrastructure\\Persistence\\Doctrine\\ORM\\Entity\\SecurityAdminUser;",
                        "use App\\Shared\\Infrastructure\\Doctrine\\DoctrineRepository;",
                        "use Doctrine\\ORM\\EntityManagerInterface;",
                        "use Doctrine\\ORM\\QueryBuilder;",
                        "use Symfony\\Component\\Uid\\Uuid;",
                        "",
                        "/**",
                        " * @extends DoctrineRepository<AdminUser>",
                        " */",
                        "class DoctrineAdminUserRepository extends DoctrineRepository implements AdminUserRepositoryInterface",
                        "{",
                        "    private const ENTITY_CLASS = SecurityAdminUser::class;",
                        "    private const ALIAS = 'admin_user';",
                        "",
                        "    public function __construct(EntityManagerInterface $em)",
                        "    {",
                        "        parent::__construct($em, self::ENTITY_CLASS, self::ALIAS);",
                        "    }",
                        "",
                        "    public function save(AdminUser $adminUser): void",
                        "    {",
                        "        $securityAdminUser = $this->transformUserFromModel($adminUser);",
                        "",
                        "        $this->em->persist($securityAdminUser);",
                        "        $this->em->flush();",
                        "        $this->em->refresh($securityAdminUser);",
                        "    }",
                        "",
                        "    public function remove(AdminUser $adminUser): void",
                        "    {",
                        "        $securityAdminUser = $this->transformUserFromModel($adminUser);",
                        "",
                        "        $this->em->remove($securityAdminUser);",
                        "        $this->em->flush();",
                        "    }",
                        "",
                        "    public function ofId(string $id): AdminUser|null",
                        "    {",
                        "        $securityAdminUser = $this->em->find(self::ENTITY_CLASS, $id);",
                        "",
                        "        if (null === $securityAdminUser) {",
                        "            return null;",
                        "        }",
                        "",
                        "        $adminUser = new AdminUser(",
                        "            new AdminUserId($securityAdminUser->getId()?->toString() ?? ''),",
                        "            new AdminUserEmail($securityAdminUser->getEmail() ?? ''),",
                        "            null,",
                        "        );",
                        "",
                        "        return $adminUser;",
                        "    }",
                        "",
                        "    public function withAscendingEmailSorting(): static",
                        "    {",
                        "        return $this->filter(static function (QueryBuilder $queryBuilder): void {",
                        "            $queryBuilder->orderBy(sprintf('%s.email', self::ALIAS), 'ASC');",
                        "        });",
                        "    }",
                        "",
                        "    public function withDescendingEmailSorting(): static",
                        "    {",
                        "        return $this->filter(static function (QueryBuilder $queryBuilder): void {",
                        "            $queryBuilder->orderBy(sprintf('%s.email', self::ALIAS), 'DESC');",
                        "        });",
                        "    }",
                        "",
                        "    public function withSearchQuery(string $query): static",
                        "    {",
                        "        return $this->filter(static function (QueryBuilder $queryBuilder) use ($query): void {",
                        "            $queryBuilder",
                        "                ->andWhere($queryBuilder->expr()->like(sprintf('%s.email', self::ALIAS), ':query'))",
                        "                ->setParameter('query', '%' . $query . '%')",
                        "            ;",
                        "        });",
                        "    }",
                        "",
                        "    public function getIterator(): \\Iterator",
                        "    {",
                        "        /** @var SecurityAdminUser $entity */",
                        "        foreach (parent::getIterator() as $entity) {",
                        "            yield $this->transformEntityToModel($entity);",
                        "        }",
                        "    }",
                        "",
                        "    private function transformUserFromModel(AdminUser $adminUser): SecurityAdminUser",
                        "    {",
                        "        $securityAdminUser = $this->em->find(self::ENTITY_CLASS, $adminUser->id->value);",
                        "",
                        "        if (null === $securityAdminUser) {",
                        "            $securityAdminUser = new SecurityAdminUser(Uuid::fromString($adminUser->id->value));",
                        "        }",
                        "",
                        "        $securityAdminUser->setEmail($adminUser->email->value);",
                        "        $securityAdminUser->setPlainPassword($adminUser->password?->value);",
                        "",
                        "        return $securityAdminUser;",
                        "    }",
                        "",
                        "    private function transformEntityToModel(SecurityAdminUser $securityAdminUser): AdminUser",
                        "    {",
                        "        return new AdminUser(",
                        "            id: new AdminUserId((string) $securityAdminUser->getId()),",
                        "            email: new AdminUserEmail($securityAdminUser->getEmail() ?? ''),",
                        "        );",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Persistence/Fixture/DataFixtures/DefaultFixtures.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Persistence\\Fixture\\DataFixtures;",
                        "",
                        "use App\\Security\\Infrastructure\\Persistence\\Fixture\\Story\\DefaultAdministratorsStory;",
                        "use Doctrine\\Bundle\\FixturesBundle\\Fixture;",
                        "use Doctrine\\Bundle\\FixturesBundle\\FixtureGroupInterface;",
                        "use Doctrine\\Common\\DataFixtures\\OrderedFixtureInterface;",
                        "use Doctrine\\Persistence\\ObjectManager;",
                        "",
                        "class DefaultFixtures extends Fixture implements FixtureGroupInterface, OrderedFixtureInterface",
                        "{",
                        "    #[\\Override]",
                        "    public function load(ObjectManager $manager): void",
                        "    {",
                        "        DefaultAdministratorsStory::load();",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public static function getGroups(): array",
                        "    {",
                        "        return ['default', 'security'];",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public function getOrder(): int",
                        "    {",
                        "        return 1;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Persistence/Fixture/DataFixtures/RandomFixtures.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Persistence\\Fixture\\DataFixtures;",
                        "",
                        "use App\\Security\\Infrastructure\\Persistence\\Fixture\\Story\\RandomAdministratorsStory;",
                        "use Doctrine\\Bundle\\FixturesBundle\\Fixture;",
                        "use Doctrine\\Bundle\\FixturesBundle\\FixtureGroupInterface;",
                        "use Doctrine\\Common\\DataFixtures\\OrderedFixtureInterface;",
                        "use Doctrine\\Persistence\\ObjectManager;",
                        "",
                        "class RandomFixtures extends Fixture implements FixtureGroupInterface, OrderedFixtureInterface",
                        "{",
                        "    #[\\Override]",
                        "    public function load(ObjectManager $manager): void",
                        "    {",
                        "        RandomAdministratorsStory::load();",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public static function getGroups(): array",
                        "    {",
                        "        return ['random', 'security'];",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public function getOrder(): int",
                        "    {",
                        "        return 1;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Persistence/Fixture/Factory/SecurityAdminUserFactory.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Persistence\\Fixture\\Factory;",
                        "",
                        "use App\\Security\\Infrastructure\\Persistence\\Doctrine\\ORM\\Entity\\SecurityAdminUser;",
                        "use Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;",
                        "use Webmozart\\Assert\\Assert;",
                        "use Zenstruck\\Foundry\\Persistence\\PersistentProxyObjectFactory;",
                        "",
                        "/**",
                        " * @extends PersistentProxyObjectFactory<SecurityAdminUser>",
                        " */",
                        "final class SecurityAdminUserFactory extends PersistentProxyObjectFactory",
                        "{",
                        "    public function __construct(",
                        "        private readonly UserPasswordHasherInterface $userPasswordHasher,",
                        "    ) {",
                        "        parent::__construct();",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    public static function class(): string",
                        "    {",
                        "        return SecurityAdminUser::class;",
                        "    }",
                        "",
                        "    public function withEmail(string $email): self",
                        "    {",
                        "        return $this->with([",
                        "            'email' => $email,",
                        "        ]);",
                        "    }",
                        "",
                        "    public function withPassword(string $password): self",
                        "    {",
                        "        return $this->with([",
                        "            'password' => $password,",
                        "        ]);",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    protected function defaults(): array",
                        "    {",
                        "        return [",
                        "            'email' => self::faker()->email(),",
                        "            'password' => 'password',",
                        "        ];",
                        "    }",
                        "",
                        "    #[\\Override]",
                        "    protected function initialize(): static",
                        "    {",
                        "        return $this",
                        "            ->afterInstantiate(function (SecurityAdminUser $user) {",
                        "                Assert::notNull($user->getPassword());",
                        "                $password = $this->userPasswordHasher->hashPassword($user, $user->getPassword());",
                        "",
                        "                $user->setPassword($password);",
                        "            })",
                        "        ;",
                        "    }",
                        "",
                        "    protected function getStart(string $email, string $username, string $password): array",
                        "    {",
                        "        return [",
                        "            'email' => $email,",
                        "            'password' => $password,",
                        "        ];",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Persistence/Fixture/Story/DefaultAdministratorsStory.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Persistence\\Fixture\\Story;",
                        "",
                        "use App\\Security\\Infrastructure\\Persistence\\Fixture\\Factory\\SecurityAdminUserFactory;",
                        "use Zenstruck\\Foundry\\Story;",
                        "",
                        "final class DefaultAdministratorsStory extends Story",
                        "{",
                        "    #[\\Override]",
                        "    public function build(): void",
                        "    {",
                        "        SecurityAdminUserFactory::createOne([",
                        "            'email' => 'admin@example.com',",
                        "            'password' => 'admin',",
                        "        ]);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Persistence/Fixture/Story/RandomAdministratorsStory.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Persistence\\Fixture\\Story;",
                        "",
                        "use App\\Security\\Infrastructure\\Persistence\\Fixture\\Factory\\SecurityAdminUserFactory;",
                        "use Zenstruck\\Foundry\\Story;",
                        "",
                        "final class RandomAdministratorsStory extends Story",
                        "{",
                        "    #[\\Override]",
                        "    public function build(): void",
                        "    {",
                        "        SecurityAdminUserFactory::createMany(30);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Security/User/Canonicalizer/Canonicalizer.php": {
                    "contents": [
                        "<?php",
                        "",
                        "/*",
                        " * This file is part of the Sylius package.",
                        " *",
                        " * (c) Sylius Sp. z o.o.",
                        " *",
                        " * For the full copyright and license information, please view the LICENSE",
                        " * file that was distributed with this source code.",
                        " */",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Security\\User\\Canonicalizer;",
                        "",
                        "final class Canonicalizer implements CanonicalizerInterface",
                        "{",
                        "    #[\\Override]",
                        "    public function canonicalize(string|null $string): string|null",
                        "    {",
                        "        return null === $string ? null : mb_convert_case($string, \\MB_CASE_LOWER, mb_detect_encoding($string) ?: null);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Security/User/Canonicalizer/CanonicalizerInterface.php": {
                    "contents": [
                        "<?php",
                        "",
                        "/*",
                        " * This file is part of the Sylius package.",
                        " *",
                        " * (c) Sylius Sp. z o.o.",
                        " *",
                        " * For the full copyright and license information, please view the LICENSE",
                        " * file that was distributed with this source code.",
                        " */",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Security\\User\\Canonicalizer;",
                        "",
                        "interface CanonicalizerInterface",
                        "{",
                        "    public function canonicalize(string|null $string): string|null;",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/Infrastructure/Symfony/Security/AdminUserProvider.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security\\Infrastructure\\Symfony\\Security;",
                        "",
                        "use App\\Security\\Infrastructure\\Persistence\\Doctrine\\ORM\\Entity\\SecurityAdminUser;",
                        "use App\\Security\\Infrastructure\\Security\\User\\Canonicalizer\\CanonicalizerInterface;",
                        "use Doctrine\\ORM\\EntityManagerInterface;",
                        "use Symfony\\Component\\Security\\Core\\Exception\\UnsupportedUserException;",
                        "use Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;",
                        "use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
                        "use Symfony\\Component\\Security\\Core\\User\\UserProviderInterface;",
                        "use Webmozart\\Assert\\Assert;",
                        "",
                        "final readonly class AdminUserProvider implements UserProviderInterface",
                        "{",
                        "    public function __construct(",
                        "        private CanonicalizerInterface $canonicalizer,",
                        "        private EntityManagerInterface $entityManager,",
                        "    ) {",
                        "    }",
                        "",
                        "    public function refreshUser(UserInterface $user): UserInterface",
                        "    {",
                        "        if (!$user instanceof SecurityAdminUser) {",
                        "            throw new UnsupportedUserException(sprintf('Invalid user class \"%s\".', get_class($user)));",
                        "        }",
                        "",
                        "        return $this->loadUserByIdentifier($user->getUserIdentifier());",
                        "    }",
                        "",
                        "    public function supportsClass(string $class): bool",
                        "    {",
                        "        return SecurityAdminUser::class === $class || is_subclass_of($class, SecurityAdminUser::class);",
                        "    }",
                        "",
                        "    public function loadUserByIdentifier(string $identifier): UserInterface",
                        "    {",
                        "        $identifier = $this->canonicalizer->canonicalize($identifier);",
                        "        Assert::notNull($identifier);",
                        "",
                        "        $repository = $this->entityManager->getRepository(SecurityAdminUser::class);",
                        "",
                        "        $user = $repository->findOneBy([",
                        "            'emailCanonical' => $identifier,",
                        "        ]);",
                        "",
                        "        if (null === $user) {",
                        "            throw new UserNotFoundException();",
                        "        }",
                        "",
                        "        return $user;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/Generator/GeneratorInterface.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\Generator;",
                        "",
                        "interface GeneratorInterface",
                        "{",
                        "    public static function generate(): string;",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Shared/Infrastructure/Generator/UuidGenerator.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Shared\\Infrastructure\\Generator;",
                        "",
                        "use Ramsey\\Uuid\\Uuid;",
                        "",
                        "final class UuidGenerator implements GeneratorInterface",
                        "{",
                        "    #[\\Override]",
                        "    public static function generate(): string",
                        "    {",
                        "        return Uuid::uuid4()->toString();",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "66d8080672c0c79182943d898282b471da9eddee"
        }
    }
}
